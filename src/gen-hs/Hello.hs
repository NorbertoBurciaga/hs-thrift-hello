{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.13.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Hello where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Hello_Types
import qualified Hello_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Ping_args = Ping_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Ping_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_args where 
  arbitrary = QC.elements [Ping_args]
from_Ping_args :: Ping_args -> T.ThriftVal
from_Ping_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_args :: T.Protocol p => p -> Ping_args -> P.IO ()
write_Ping_args oprot record = T.writeVal oprot $ from_Ping_args record
encode_Ping_args :: T.StatelessProtocol p => p -> Ping_args -> LBS.ByteString
encode_Ping_args oprot record = T.serializeVal oprot $ from_Ping_args record
to_Ping_args :: T.ThriftVal -> Ping_args
to_Ping_args (T.TStruct fields) = Ping_args{

  }
to_Ping_args _ = P.error "not a struct"
read_Ping_args :: T.Protocol p => p -> P.IO Ping_args
read_Ping_args iprot = to_Ping_args <$> T.readVal iprot (T.T_STRUCT typemap_Ping_args)
decode_Ping_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Ping_args
decode_Ping_args iprot bs = to_Ping_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_args) bs
typemap_Ping_args :: T.TypeMap
typemap_Ping_args = Map.fromList []
default_Ping_args :: Ping_args
default_Ping_args = Ping_args{
}
data Ping_result = Ping_result deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Ping_result where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Ping_result where 
  arbitrary = QC.elements [Ping_result]
from_Ping_result :: Ping_result -> T.ThriftVal
from_Ping_result record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Ping_result :: T.Protocol p => p -> Ping_result -> P.IO ()
write_Ping_result oprot record = T.writeVal oprot $ from_Ping_result record
encode_Ping_result :: T.StatelessProtocol p => p -> Ping_result -> LBS.ByteString
encode_Ping_result oprot record = T.serializeVal oprot $ from_Ping_result record
to_Ping_result :: T.ThriftVal -> Ping_result
to_Ping_result (T.TStruct fields) = Ping_result{

  }
to_Ping_result _ = P.error "not a struct"
read_Ping_result :: T.Protocol p => p -> P.IO Ping_result
read_Ping_result iprot = to_Ping_result <$> T.readVal iprot (T.T_STRUCT typemap_Ping_result)
decode_Ping_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Ping_result
decode_Ping_result iprot bs = to_Ping_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Ping_result) bs
typemap_Ping_result :: T.TypeMap
typemap_Ping_result = Map.fromList []
default_Ping_result :: Ping_result
default_Ping_result = Ping_result{
}
data Message_args = Message_args  { message_args_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Message_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` message_args_message record  
instance QC.Arbitrary Message_args where 
  arbitrary = M.liftM Message_args (QC.arbitrary)
  shrink obj | obj == default_Message_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Message_args{message_args_message = message_args_message obj} then P.Nothing else P.Just $ default_Message_args{message_args_message = message_args_message obj}
    ]
from_Message_args :: Message_args -> T.ThriftVal
from_Message_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v12 -> P.Just (1, ("message",T.TString $ E.encodeUtf8 _v12))) $ message_args_message record
  ]
write_Message_args :: T.Protocol p => p -> Message_args -> P.IO ()
write_Message_args oprot record = T.writeVal oprot $ from_Message_args record
encode_Message_args :: T.StatelessProtocol p => p -> Message_args -> LBS.ByteString
encode_Message_args oprot record = T.serializeVal oprot $ from_Message_args record
to_Message_args :: T.ThriftVal -> Message_args
to_Message_args (T.TStruct fields) = Message_args{
  message_args_message = P.maybe (message_args_message default_Message_args) (\(_,_val14) -> (case _val14 of {T.TString _val15 -> E.decodeUtf8 _val15; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Message_args _ = P.error "not a struct"
read_Message_args :: T.Protocol p => p -> P.IO Message_args
read_Message_args iprot = to_Message_args <$> T.readVal iprot (T.T_STRUCT typemap_Message_args)
decode_Message_args :: T.StatelessProtocol p => p -> LBS.ByteString -> Message_args
decode_Message_args iprot bs = to_Message_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Message_args) bs
typemap_Message_args :: T.TypeMap
typemap_Message_args = Map.fromList [(1,("message",T.T_STRING))]
default_Message_args :: Message_args
default_Message_args = Message_args{
  message_args_message = ""}
data Message_result = Message_result  { message_result_success :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Message_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` message_result_success record  
instance QC.Arbitrary Message_result where 
  arbitrary = M.liftM Message_result (QC.arbitrary)
  shrink obj | obj == default_Message_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Message_result{message_result_success = message_result_success obj} then P.Nothing else P.Just $ default_Message_result{message_result_success = message_result_success obj}
    ]
from_Message_result :: Message_result -> T.ThriftVal
from_Message_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v18 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v18))) $ message_result_success record
  ]
write_Message_result :: T.Protocol p => p -> Message_result -> P.IO ()
write_Message_result oprot record = T.writeVal oprot $ from_Message_result record
encode_Message_result :: T.StatelessProtocol p => p -> Message_result -> LBS.ByteString
encode_Message_result oprot record = T.serializeVal oprot $ from_Message_result record
to_Message_result :: T.ThriftVal -> Message_result
to_Message_result (T.TStruct fields) = Message_result{
  message_result_success = P.maybe (message_result_success default_Message_result) (\(_,_val20) -> (case _val20 of {T.TString _val21 -> E.decodeUtf8 _val21; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Message_result _ = P.error "not a struct"
read_Message_result :: T.Protocol p => p -> P.IO Message_result
read_Message_result iprot = to_Message_result <$> T.readVal iprot (T.T_STRUCT typemap_Message_result)
decode_Message_result :: T.StatelessProtocol p => p -> LBS.ByteString -> Message_result
decode_Message_result iprot bs = to_Message_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Message_result) bs
typemap_Message_result :: T.TypeMap
typemap_Message_result = Map.fromList [(0,("success",T.T_STRING))]
default_Message_result :: Message_result
default_Message_result = Message_result{
  message_result_success = ""}
process_ping (seqid, iprot, oprot, handler) = do
  args <- read_Ping_args iprot
  (X.catch
    (do
      Iface.ping handler
      let res = default_Ping_result
      T.writeMessage oprot ("ping", T.M_REPLY, seqid) $
        write_Ping_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("ping", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
process_message (seqid, iprot, oprot, handler) = do
  args <- read_Message_args iprot
  (X.catch
    (do
      val <- Iface.message handler (message_args_message args)
      let res = default_Message_result{message_result_success = val}
      T.writeMessage oprot ("message", T.M_REPLY, seqid) $
        write_Message_result oprot res)
    ((\_ -> do
      T.writeMessage oprot ("message", T.M_EXCEPTION, seqid) $
        T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "ping" -> process_ping (seqid,iprot,oprot,handler)
  "message" -> process_message (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessage oprot (name,T.M_EXCEPTION,seqid) $
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
process handler (iprot, oprot) = do
  T.readMessage iprot (
    proc_ handler (iprot,oprot))
  P.return P.True
